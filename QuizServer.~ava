public class QuizServer extends Server{
  private DatabaseConnector d;
  private List<Spieler> spieler;
  private Spiel[] spiele;
  public QuizServer(int pPort) {
    super(pPort);
    d=new DatabaseConnector("",0,"Datenbank.accdb","","");
    spieler=new List<Spieler>();
    spiele=new Spiel[100];
  }
  public void processNewConnection(String pClientIP, int pClientPort){
    this.send(pClientIP, pClientPort, "Willkommen!");
  }  
  public void processMessage(String pClientIP, int pClientPort, String pMessage){
    String[] nachrichtTeil = pMessage.split("::");
    System.out.println(pMessage);
    if(nachrichtTeil[0].equals("1")){           
      if (pruefLogin(nachrichtTeil[1], nachrichtTeil[2])) {
        this.send(pClientIP, pClientPort, "1::"+nachrichtTeil[1]);
      }else{
        this.send(pClientIP, pClientPort, "2");  
      }
    }
    if(nachrichtTeil[0].equals("2")){           
      this.send(pClientIP, pClientPort, "3::"+quizLaden(0));
    }
    if(nachrichtTeil[0].equals("3")){           
      spieler.toFirst();
      if (spieler.hasAccess()) {
        Spieler tmp=new Spieler(nachrichtTeil[1], pClientIP, pClientPort, this.getElo(nachrichtTeil[1]));
        int tmp2=spieler.getContent().getSpiel();
        this.spielerhinzufuegen(tmp, tmp2);
        tmp.setSpiel(tmp2);
        this.send(pClientIP, pClientPort, "3::"+quizLaden(0)+"::"+tmp.getSpiel()+"::"+tmp.getNr());
        this.send(spieler.getContent().getIp(), spieler.getContent().getPort(), "3::"+quizLaden(0)+"::"+spieler.getContent().getSpiel()+"::"+spieler.getContent().getNr());
      }
      Spieler tmp=new Spieler(nachrichtTeil[1], pClientIP, pClientPort, this.getElo(nachrichtTeil[1]));
      spieler.append(tmp);
      int tmp2=this.spielErstellen(2);
      spielerhinzufuegen(tmp, tmp2);
      tmp.setSpiel(tmp2);
    }
    if(nachrichtTeil[0].equals("4")){           
      spiele[Integer.parseInt(nachrichtTeil[2])].punkteGeben(Integer.parseInt(nachrichtTeil[3]), Integer.parseInt(nachrichtTeil[1]));
      Spieler tmp=spiele[Integer.parseInt(nachrichtTeil[2])].gewinner();
      if (tmp!=null) {
        this.send(tmp.getIp(), tmp.getPort(), "4");
      }
    }
  }
  public int spielErstellen(int pAnzahl){
    for (int i=0;i<spiele.length;i++) {
      if (spiele[i]==null) {
        spiele[i]=new Spiel(pAnzahl);
        return i;
      }
    }
    return -1;
  }
  public int spielerhinzufuegen(Spieler pSpieler, int pSpiel){
    return spiele[pSpiel].spielerhinzufuegen(pSpieler);
  }
  public int getElo(String pUser){
    //    if (pUser.equals("a")) {
    //      return 1200;
    //    }
    //    if (pUser.equals("b")) {
    //      return 1000;
    //    }
    //    if (pUser.equals("c")) {
    //      return 1190;
    //    }
    return 1000;
  }
  public String quizLaden(int pId){
    return "1+1=?--1--2--3--4--2//1+3=?--1--2--3--4--4";
  }
  public void processClosingConnection (String pClientIP, int pClientPort){
    this.send(pClientIP, pClientPort, "Auf Wiedersehen!");
  }
  public boolean pruefLogin(String pUserName, String pPasswort){
    return true;
  }
  public void sende(Spieler pSpieler, String pNachricht){
    this.send(pSpieler.getIp(), pSpieler.getPort(), pNachricht);
  }
}
